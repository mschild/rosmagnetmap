/// \file

// ############################ includes ########################################

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/Float32MultiArray.h"
#include "geometry_msgs/Pose2D.h"
#include <iostream>
#include <fstream>
#include <stdlib.h>

// for pi 
#include <math.h>	

// includes for PCL 
#include <sensor_msgs/PointCloud2.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_conversions/pcl_conversions.h>
 #include <pcl/io/pcd_io.h>  
  
 
typedef pcl::PointCloud<pcl::PointXYZRGB> PointCloud;


// ############################ definitions ########################################

/// distance between scitos and array 
#define _ARRAY_DIST_ 0.68

/// just minus one 
#define M_ONE -1.0

/// scale parameter 
#define SCALED 0.92

// filenames 
/// map filename for pointcloud file  
#define PC_MAP_FILENAME 		"map.pcd"
/// map filename for magnetmap file  
#define MAGN_MAP_FILENAME 		"magnetmap.txt"
/// map filename for raw magnet map file  
#define MAGNRAW_MAP_FILENAME 	"magnetmapraw.txt"

// macros for saving functions 
/// seperator used in \ref MAGNRAW_MAP_FILENAME
#define RAW_DATA_SEPERATOR 		","

// rviz frame IDs
/// \ref PC_map frame id for rviz
#define PC_MAP_FRAME_ID 		"map"	
/// \ref PC frame id for rviz
#define PC_FRAME_ID 			"data"



// ############################ global variables ########################################

// to syncronize position and magnet (so it will only publish data if all subscriptions are ready)
bool magnetoms_called = false;
 
// new 2 dimensional Array for the Data     
float new_data[10][3];
 
// open file to put the mapdata in (nice to have a look)
std::ofstream Magnetmap(MAGN_MAP_FILENAME);
 
// open file to put the mapdata in (just the data, better to work with)
std::ofstream Magnetmapraw(MAGNRAW_MAP_FILENAME);
 
/// "small" pointcloud that buffers incomming sensor data 
PointCloud::Ptr PC 		= new PointCloud(); // will it work like this??

/// "big" pointcloud that saves all recorded data 
PointCloud::Ptr PC_map 	= new PointCloud(); // will it work like this?

// publisher for pointcloud 
ros::Publisher pub_pcl; 

/**
	sensor offsets 
*/  
float offset[10][3] = {
    {31.0, 31.5, 81.5},
    {20.0, -5.0, 104.0},
    {34.0, -3.0, 110.0},
    {26.5, -38.5, 100.5},
    {20.0, -4.0, 100.5},
    {-17.5, -33.0, 77.0},
    {32.0, 64.0, 109.0},
    {25.0, 29.0, 93.0},
    {28.0, 37.5, 105.0},
    {29.0, 10.5, 91.0}
};

/**
	???
*/ 
float MAGN_SCALE[10][3] = {
    {-6, -1.5, 0.5}, 
    {-10, -2, -2}, 
    {-6, 1, -24}, 
    {9.5, -5.5, -2.5}, 
    {17, 2, 3.5}, 
    {32.5, 35, 13}, 
    {-9, 4, 6}, 
    {4, -3, -16}, 
    {4, 4.5, 2}, 
    {9, -2.5, 12}
};



// ############################ helper functions ########################################

/// convert a MagnData array to rgb-color 
/**
	\param [in] singleMagnData	magnet data in x,y and z. 
*/ 
uint32_t  MagnData_to_hexcolor(float singleMagnData[3])
{
  uint8_t r,g,b; 
  
  if(  singleMagnData[0] > 1225 ) r = 255;
  else if (singleMagnData[0] < -1225) r = 0;
  else r = 128 + singleMagnData[0] / 10; 
  
  if(  singleMagnData[1] > 1225 ) g = 255;
  else if (singleMagnData[1] < -1225) g = 0;
  else g = 128 + singleMagnData[1] / 10;
  
  if(  singleMagnData[2] > 1225 ) b = 255;
  else if (singleMagnData[2] < -1225) b = 0;
  else b = 128 + singleMagnData[2] / 10;
  

  uint32_t rgb = ((uint32_t)r << 16 | (uint32_t)g << 8 | (uint32_t)b);
  return rgb; 
}




// ############################ saving recorded data ########################################

/// puts a dataset to pointcloud
/**
	- transforms sensor positions
	- assigns color using MagnData_to_hexcolor()
	
	- publishes the new data 
	- pushes the new data to PC_map

	\param [in] MagnData	array of magnet data
	\param [in]	x_pos 		x position of the scitos 
	\param [in]	y_pos 		y position of the scitos
	\param [in] theta		angle 
*/ 
void put_data_to_PC(float MagnData[][3], float x_pos, float y_pos, float theta){
  
    // moving towards - x (which means moving toward -y in rviz)
    if (theta >= M_PI / 4 && theta <= M_PI * 3 / 4){
      for( int i = 0; i < 10; i++)
      {
          PC->points[i].x = x_pos - 0.225 + i*0.05;
          PC->points[i].y = y_pos; 
          PC->points[i].z = 0; 
          
          uint32_t rgb = MagnData_to_hexcolor(MagnData[i]); 
          PC->points[i].rgb = *reinterpret_cast<float*>( &rgb );
      }  
    }
    // moving towards + x (which means moving toward +y in rviz)
    else if (theta <= - M_PI/ 4 && theta >= - M_PI * 3 / 4){
      for( int i = 0; i < 10; i++)
      {
          PC->points[i].x = x_pos + 0.225 - i*0.05;
          PC->points[i].y = y_pos;
          PC->points[i].z = 0; 
          
          uint32_t rgb = MagnData_to_hexcolor(MagnData[i]); 
          PC->points[i].rgb = *reinterpret_cast<float*>( &rgb );
      }  
    }
    // moving towards +y (which means moving toward +x in rviz)
    else if (theta < M_PI / 4 && theta > - M_PI / 4){
      for( int i = 0; i < 10; i++)
      {
          PC->points[i].x = x_pos;
          PC->points[i].y = (y_pos - 0.225 + i*0.05); 
          PC->points[i].z = 0; 
          
          // set color 
          
          uint32_t rgb = MagnData_to_hexcolor(MagnData[i]); 
          PC->points[i].rgb = *reinterpret_cast<float*>( &rgb );
      }  
    }
    // moving towards -y (which means moving toward - x in rviz)
    else{
      for( int i = 0; i < 10; i++)
      {
          PC->points[i].x = x_pos;
          PC->points[i].y = y_pos + 0.225 - i*0.05; 
          PC->points[i].z = 0; //norm_data[i]; 
          
          uint32_t rgb = MagnData_to_hexcolor(MagnData[i]); 
          PC->points[i].rgb = *reinterpret_cast<float*>( &rgb );
      } 
    }
    
    // publish the new sensor data 
    PC->header.stamp = ros::Time::now().toNSec();
    pub_pcl.publish(PC); 

	// push data to PC_map
    PC_map->width += 10;
    for( int i = 0; i < 10; i++)
        PC_map->points.push_back(PC->points[i]); 
    
}

/// save formated sensor data to \ref MAGN_MAP_FILENAME
/**

	\param [in] MagnData	array of magnet data
	\param [in]	x_pos 		x position of the scitos 
	\param [in]	y_pos 		y position of the scitos
	\param [in] theta		angle 
*/ 
void output_mapdata (float MagnData[][3], float x_pos, float y_pos, float theta){
 
    Magnetmap         
        << "Position Data:" << std::endl 
        << " (" << x_pos <<"/ "<< y_pos <<") "<< theta << "Â°" << std::endl
        << "Magnet Data:" << std::endl;
 
    for(int i = 0; i < 10; i++){
            Magnetmap
                << "Sensor " << i << std::endl 
                << " x: " << MagnData[i][0] 
                <<", y: " << MagnData[i][1] 
                <<", z: " << MagnData[i][2]
                << std::endl; 
    
    }
    Magnetmap << " " << std::endl;
}
 
/// save raw sensor data to \ref MAGNRAW_MAP_FILENAME
/**

	\param [in] MagnData	array of magnet data
	\param [in]	x_pos 		x position of the scitos 
	\param [in]	y_pos 		y position of the scitos
	\param [in] theta		angle 
*/ 
void output_mapdata_raw(float MagnData[][3], float x_pos, float y_pos, float theta){
     
 
    // all values are seperated by "," the first 3 are the position data
    Magnetmapraw     
        << x_pos << RAW_DATA_SEPERATOR << y_pos << RAW_DATA_SEPERATOR  << theta;
         
    for(int i = 0; i < 10; i++){
                       
        Magnetmapraw 
            << RAW_DATA_SEPERATOR << MagnData[i][0] 
            << RAW_DATA_SEPERATOR << MagnData[i][1] 
            << RAW_DATA_SEPERATOR << MagnData[i][2];  
    }
    Magnetmapraw << std::endl;
}



// ############################ subscription callbacks ########################################

/// callback for position data 
/**
	- saves data formated
	- saves data raw 
	- calls put_data_to_PC()

	\param [in] msg		position data, comming from ROS (Scitos)
*/ 
void Callback_position(const geometry_msgs::Pose2D::ConstPtr& msg)
{
    // Position of the center of the Array
    // 68 cm behind the Robot, just took the 4 quadrants as direction
 
    float theta = msg->theta;
    float x_pos = msg->x;
    float y_pos = msg->y;
     
    // get the Position of the center of the Array
    if(theta >= M_PI /4 && theta <= M_PI *3/4){
        x_pos += _ARRAY_DIST_;                
    }
    else if(theta <= -M_PI /4 && theta >= - M_PI *3/4){
        x_pos -= _ARRAY_DIST_;                             
    }
    else if(theta < M_PI /4 && theta > - M_PI /4){
        y_pos -= _ARRAY_DIST_;             
    }
    else{
        y_pos += _ARRAY_DIST_;             
    }

    // debug output
    ROS_INFO("x: [%f]", x_pos);
    ROS_INFO("y: [%f]", y_pos);
    ROS_INFO("theta (RAD): [%f]", theta); 
    ROS_INFO("theta (Grad): [%f]", theta*(360/(2* M_PI)));
     
    // write the position data + magnet data to .txt files
    if (magnetoms_called == true){
        output_mapdata(new_data, x_pos, y_pos, theta*(360 / (2 * M_PI)));
        output_mapdata_raw(new_data, x_pos, y_pos, theta*(360 / (2 * M_PI)));
        
        put_data_to_PC(new_data, x_pos, y_pos, theta);
        
    }
}   
 
/// callback for sensor data 
/**
	- substract offset from sensors
	- scale the data
 
	\param [in] msg		sensor data, comming from ROS (Arduino)
*/ 
void Callback_data(const std_msgs::Float32MultiArray::ConstPtr& msg)
{
    // to synchronize
    magnetoms_called = true;
 
    ROS_INFO("********************************************");
    float x_avarage = 0;
    float y_avarage = 0;
    float z_avarage = 0;
     
    // substract the offset and put the data in new_data Array
    for(int i = 0; i < 10; i++){
        new_data[i][0] = msg->data[i*3] - offset[i][0];
        new_data[i][1] = msg->data[1+i*3] - offset[i][1];
        new_data[i][2] = msg->data[2+i*3] - offset[i][2];
         
        // scale the data
        for(int j = 0; j < 3; ++j){
            if (new_data[i][j] < 0) {
                new_data[i][j] = (std::abs(new_data[i][j]) + MAGN_SCALE[i][j]) * M_ONE * SCALED ;
            } else {
                new_data[i][j] = (new_data[i][j] + MAGN_SCALE[i][j]) * SCALED;
            }
        }

        // debug output
        ROS_INFO("Sensor: [%i]", i);
        ROS_INFO("x: [%f]", new_data[i][0]);
        ROS_INFO("y: [%f]", new_data[i][1]);
        ROS_INFO("z: [%f]", new_data[i][2]);
    }
 
    ROS_INFO("********************************************");
}

// ############################ the main function ########################################

/// the main entry point
int main(int argc, char **argv)
{    
	// initialize ros 
	ros::init(argc, argv, "listener");
 
	// ros node handle 
	ros::NodeHandle n;

	// subscrbibers
	ros::Subscriber sub_pos = n.subscribe("PoseChannel", 1000, Callback_position);
	ros::Subscriber sub_data = n.subscribe("sensorData", 1000, Callback_data);
  
  	// prepare the small PointCloud 
  
  	// init publisher 
	pub_pcl =  n.advertise<PointCloud> ("points2", 1000);
  
  	// prepare the small pointCloud
	PC->header.frame_id = PC_FRAME_ID;			// set the clouds frame_id (for rviz)  
	PC->height = 1;   							// 1 for unorganized map
	PC->width = 10;								// (fixed)
  
  	// allocate 10 points in the cloud, they will be changed later
	for ( int i = 0; i < 10; i++)
    	PC->points.push_back (pcl::PointXYZRGB(255,255,255));
  
    
  	// prepare the big pointCloud
	PC_map->header.frame_id = PC_MAP_FRAME_ID;	// set the clouds frame_id (for rviz) 
   	PC_map->height = 1;   						// 1 for unorganized map
	PC_map->width = 0;							// (dynamic, will be increased later)
  	

  	// enter a loop, pumping callbacks, will exit when Ctrl-C is pressed, or the node is shutdown by the master.
	ros::spin();
  
  	// save the pointcloud map to a file, using binary format 
	pcl::io::savePCDFile (PC_MAP_FILENAME, *PC_map, false);
  
  	// close the both output Files
  	Magnetmap.close();
  	Magnetmapraw.close();
   
  return 0;
}
